@using OnlineShop.Models.Entity
@model IEnumerable<Product>

<div class="row">
    @foreach (var product in Model)
    {
        <div class="col-lg-3 col-md-6 col-sm-12 mb-4">
            <div class="card" data-product-id="@product.Id">
                @if (product.Images.Any())
                {
                    <a href="@Url.Action("Product", "Product", new { id = product.Id })">
                        <img src="data:image/jpeg;base64,@Convert.ToBase64String(product.Images.First().Data)" 
                                     data-hover-src="@(product.Images.Count > 1 ? "data:image/jpeg;base64," + Convert.ToBase64String(product.Images[1].Data) : string.Empty)" 
                             class="card-img-top current-product-image" 
                             alt="Product Image">
                    </a>
                }
                <button class="favorite-button">
                    <img src="/img/favorite_border.svg" alt="Favorite" class="favorite-icon">
                </button>
                <div class="card-body">
                    <h4 class="card-title">@product.Brand.Name</h4>
                    <p class="card-text">@product.Description</p>
                    <p class="card-text">@product.Price.ToString("C0", new System.Globalization.CultureInfo("uk-UA"))</p>
                </div>
            </div>
        </div>
    }
</div>

<style>
    

    .current-product-image {
    transition: opacity 0.3s ease;
}

.current-product-image.hovered {
    opacity: 0.8; /* Параметр для изменения внешнего вида при наведении */
}

.favorite-button {
    position: absolute;
    top: 10px;
    right: 10px;
    background: transparent;
    border: none;
    cursor: pointer;
    border-radius: 5px; /* Круглая кнопка */
    border: 2px solid transparent; /* Начальная граница прозрачная */
    transition: border-color 0.3s ease;
}

.favorite-icon {
    width: 24px; /* Размер иконки */
    height: 24px;
    transition: opacity 0.3s ease;
}

.favorite-button:hover {
        background-color: #f5f5f5;
        color: #727272;
}

.favorite-button:hover .favorite-icon {
    content: url('/img/favorite_fill.svg'); /* Заполненное сердце при наведении */
}

.favorite-button.active .favorite-icon {
    content: url('/img/favorite_fill.svg'); /* Заполненное сердце, когда товар в избранном */
}

</style>


<script>
    document.addEventListener("DOMContentLoaded", function () {
        // Функция для обновления изображения при наведении
        const images = document.querySelectorAll('.current-product-image');
        images.forEach(img => {
            const originalSrc = img.src;
            const hoverSrc = img.getAttribute('data-hover-src');
            if (hoverSrc) {
                img.addEventListener('mouseover', function () {
                    img.src = hoverSrc;
                });
                img.addEventListener('mouseout', function () {
                    img.src = originalSrc;
                });
            }
        });

        // Функция для проверки состояния избранных товаров и обновления иконок
        function updateFavoriteIcons() {
            const favorites = JSON.parse(localStorage.getItem('favorites')) || [];
            document.querySelectorAll('.favorite-button').forEach(button => {
                const productId = button.closest('.card').dataset.productId;
                const icon = button.querySelector('.favorite-icon');

                // Если товар есть в избранном, показываем заполненное сердце
                if (favorites.includes(productId)) {
                    icon.src = '/img/favorite_fill.svg';
                    button.classList.add('active');
                } else {
                    icon.src = '/img/favorite_border.svg';
                    button.classList.remove('active');
                }
            });
        }

        // Обновляем иконки при загрузке страницы
        updateFavoriteIcons();

        // Добавляем обработчики на кнопки избранного для карточек товаров
        const favoriteButtons = document.querySelectorAll('.favorite-button');
        favoriteButtons.forEach(button => {
            button.addEventListener('click', function () {
                const productId = this.closest('.card').dataset.productId; // Получаем ID товара
                let favorites = JSON.parse(localStorage.getItem('favorites')) || [];

                if (favorites.includes(productId)) {
                    // Удаление товара из избранного
                    favorites = favorites.filter(id => id !== productId);
                    this.querySelector('.favorite-icon').src = '/img/favorite_border.svg';
                    this.classList.remove('active');
                } else {
                    // Добавление товара в избранное
                    favorites.push(productId);
                    this.querySelector('.favorite-icon').src = '/img/favorite_fill.svg';
                    this.classList.add('active');
                }

                // Обновляем localStorage
                localStorage.setItem('favorites', JSON.stringify(favorites));

                // Обновляем счетчик избранного (этот код теперь есть в _Layout.cshtml)
                const event = new Event('favoritesUpdated');
                document.dispatchEvent(event); // Сообщаем всем страницам об обновлении избранного
            });
        });
    });
</script>




